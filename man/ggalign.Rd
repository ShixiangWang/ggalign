% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggalign.R
\name{ggalign}
\alias{ggalign}
\title{Create ggplot object}
\usage{
ggalign(
  data = waiver(),
  mapping = aes(),
  ...,
  size = NULL,
  no_axes = NULL,
  active = NULL
)
}
\arguments{
\item{data}{A flexible input that specifies the data to be used
\itemize{
\item \code{NULL}: No data is set.
\item \code{\link[ggplot2:waiver]{waiver()}}: Try to use the layout matrix.
\item A \code{function} (including purrr-like lambda syntax) that is applied to the
layout matrix. If you want to transform the final plot data, please use
\code{\link[=scheme_data]{scheme_data()}}.
\item A \code{matrix}, \verb{data frame}, or atomic vector.
}}

\item{mapping}{Default list of aesthetic mappings to use for plot.
If not specified, must be supplied in each layer added to the plot.}

\item{...}{<\link[rlang:dyn-dots]{dyn-dots}> Additional arguments passed to
\code{\link[=fortify_data_frame]{fortify_data_frame()}}.}

\item{size}{The relative size of the plot, can be specified as a
\code{\link[grid:unit]{unit}}.}

\item{no_axes}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Logical; if \code{TRUE},
removes axes elements for the alignment axis using \code{\link[=theme_no_axes]{theme_no_axes()}}. By
default, will use the option-
\code{"ggalign.align_no_axes"}.}

\item{active}{A \code{\link[=active]{active()}} object that defines the context settings when
added to a layout.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

\code{ggalign()} is similar to \code{ggplot} in that it initializes a \code{ggplot} data
and \code{mapping}. Same with other \verb{align_*} functions. \code{ggalign()} allowing you
to provide data in various formats, including matrices, data frames, or
simple vectors. By default, it will inherit from the layout. If a function,
it will apply with the layout matrix.
}
\section{ggplot2 specification}{

\code{ggalign} initializes a ggplot \code{data} and \code{mapping}.

\code{ggalign()} always applies a default mapping for the axis of the data index
in the layout. This mapping is \code{aes(y = .data$.y)} for horizontal stack
layout (including left and right annotation) and \code{aes(x = .data$.x)}
for vertical stack layout (including top and bottom annotation).

The data in the underlying \code{ggplot} object will contain following columns:
\itemize{
\item \code{.panel}: the panel for the aligned axis. It means \code{x-axis} for vertical
stack layout (including top and bottom annotation), \code{y-axis} for
horizontal stack layout (including left and right annotation).
\item \code{.x}/\code{y} and \code{.discrete_x}/\code{.discrete_y}: an integer index of \code{x}/\code{y}
coordinates and a factor of the data labels (only applicable when names
exists).
\item \code{.names} (\code{\link[vctrs:vec_names]{vec_names()}}) and \code{.index}
(\code{\link[vctrs:vec_size]{vec_size()}}/\code{\link[=NROW]{NROW()}}): a character names (only
applicable when names exists) and an integer index of the original data.
\item \code{.row_names} and \code{.row_index}: the row names and an integer of
row index of the original matrix (only applicable if \code{data} is a
\code{matrix}).
\item \code{.column_names} and \code{.column_index}: the column names and column index of
the original matrix (only applicable if \code{data} is a \code{matrix}).
\item \code{value}: the actual value (only applicable if \code{data} is a \code{matrix} or
atomic vector).
}

\code{matrix} input will be automatically melted into a long foramted data frame.

Atomic vector will be put in the \code{value} column of the data frame.

In the case where the input data is already a data frame, following columns
(\code{.panel}, \code{.index}, \code{.names}, \code{.x}/\code{.y}, \code{.discrete_x}/\code{.discrete_y}) are
added to the data frame.

It is recommended to use \code{.x}/\code{.y}, or \code{.discrete_x}/\code{.discrete_y} as the
\code{x}/\code{y} mapping.

If the data inherits from \code{\link[=quad_layout]{quad_layout()}}/\code{\link[=ggheatmap]{ggheatmap()}}, an additional
column will be added.
\itemize{
\item \code{.extra_panel}: the panel information for column (left or right
annotation) or row (top or bottom annotation).
}
}

\section{Discrete Axis Alignment}{

It is important to note that we consider rows as observations, meaning
\code{vec_size(data)}/\code{NROW(data)} must match the number of observations along the
axis used for alignment (x-axis for a vertical stack layout, y-axis for a
horizontal stack layout).
}

\examples{
ggheatmap(matrix(rnorm(81), nrow = 9)) +
    anno_top() +
    ggalign() +
    geom_point(aes(y = value))

# if data is `NULL`, a data frame with following column will be created
# (`.panel`, `.index`, `.names`, `.x`/`.y`, `.discrete_x`/`.discrete_y`)
ggheatmap(matrix(rnorm(81), nrow = 9)) +
    anno_top(size = 0.5) +
    align_dendro(k = 3L) +
    ggalign(data = NULL, size = 0.2) +
    geom_tile(aes(y = 1L, fill = .panel))

}
