% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layout-heatmap-oncoplot.R
\name{ggoncoplot}
\alias{ggoncoplot}
\title{Create \code{OncoPrint} Visualizations from Genetic Alteration Data}
\usage{
ggoncoplot(
  data,
  mapping = aes(),
  ...,
  map_width = NULL,
  map_height = NULL,
  reorder_row = reorder_column,
  reorder_column = TRUE
)
}
\arguments{
\item{data}{A character matrix which encodes the alterations, you can use
\verb{[;:,|]} to separate multiple alterations.}

\item{mapping}{Default list of aesthetic mappings to use for plot. In
addition, we will always add mapping \code{aes(.data$.x, .data$.y)}.}

\item{...}{
  Arguments passed on to \code{\link[=heatmap_layout]{heatmap_layout}}
  \describe{
    \item{\code{.width,.height}}{Heatmap body width/height, can be a \link[grid:unit]{unit} object.}
    \item{\code{action}}{A \code{\link[=plot_action]{plot_action()}} object used to define the default plot action
in the layout.}
    \item{\code{filling}}{A boolean value indicating whether to fill the heatmap. If you
wish to customize the filling style, set this to \code{FALSE}.

By default, the classic heatmap colour scheme
\code{\link[ggplot2:scale_gradient]{scale_fill_gradient2(low = "blue", high = "red")}}
is utilized for continuous values.
You can use the option
\code{"ggalign.heatmap_continuous_fill"} or
\code{"ggalign.heatmap_discrete_fill"} to modify the
default heatmap body fill color scale. See
\code{\link[ggplot2:scale_colour_continuous]{scale_fill_continuous()}} or
\code{\link[ggplot2:scale_colour_discrete]{scale_fill_discrete()}} for option setting
details.}
    \item{\code{guides}}{A string with one or more of \code{"t"}, \code{"l"}, \code{"b"}, and \code{"r"} indicating
which side of guide legends should be collected. Defaults to
\code{\link[ggplot2:waiver]{waiver()}}, which inherits from the parent layout.  If
there is no parent layout, or if \code{NULL} is provided, no guides will be
collected.}
    \item{\code{theme}}{A \code{\link[ggplot2:theme]{theme()}} used to render the \code{guides},
\code{title}, \code{subtitle}, \code{caption}, \code{margins}, \code{patch.title}, \code{panel.border}, and
\code{background}. If \code{NULL} (default), will inherit from the parent \code{layout}.}
    \item{\code{set_context}}{A single boolean value indicates whether to set the active
context to current plot. If \code{TRUE}, all subsequent ggplot elements will be
added into this plot.}
    \item{\code{order}}{An single integer for the plot area order.}
    \item{\code{name}}{A string of the plot name. Used to switch the active context in
\code{\link[=hmanno]{hmanno()}} or \code{\link[=stack_active]{stack_active()}}.}
  }}

\item{map_width, map_height}{A named numeric value defines the width/height of
each alterations.}

\item{reorder_row, reorder_column}{A boolean value indicating whether to
reorder the rows/columns based on the frequency or characteristics of the
alterations.}
}
\value{
A \code{HeatmapLayout} object.
}
\description{
The \code{ggoncoplot()} function generates \code{oncoPrint} visualizations that display
genetic alterations in a matrix format. This function is especially useful
for visualizing complex genomic data, such as mutations, copy number
variations, and other genomic alterations in cancer research.
}
\details{
\code{ggoncoplot()} is a wrapper around the \code{\link[=ggheatmap]{ggheatmap()}} function, designed to
simplify the creation of \code{OncoPrint}-style visualizations. The function
automatically processes the input character matrix by splitting the encoded
alterations (delimited by \verb{[;:,|]}) into individual genomic events and
unnesting the columns for visualization.

Additionally, a predefined reordering function, adapted from
\url{https://gist.github.com/armish/564a65ab874a770e2c26}, is included to enhance
the organization of the alterations.
}
\examples{
# A simple example from `ComplexHeatmap`
mat <- read.table(textConnection(
    "s1,s2,s3
g1,snv;indel,snv,indel
g2,,snv;indel,snv
g3,snv,,indel;snv"
), row.names = 1, header = TRUE, sep = ",", stringsAsFactors = FALSE)

ggoncoplot(mat, map_width = c(snv = 0.5), map_height = c(indel = 0.9)) +
    scale_fill_brewer(palette = "Dark2", na.translate = FALSE)
}
