% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/raster-magick.R
\name{raster_magick}
\alias{raster_magick}
\title{Rasterize the input object}
\usage{
raster_magick(
  x,
  magick = NULL,
  ...,
  dpi = NULL,
  dev = NULL,
  backend = waiver(),
  interpolate = FALSE
)
}
\arguments{
\item{x}{An object to rasterize, can be a \code{\link[grid:grid.grob]{grob()}},
\code{\link[ggplot2:layer]{layer()}}, \code{\link[ggplot2:ggplot]{ggplot()}}, or a list of such
objects.}

\item{magick}{A function (purrr-style formula is accepted) that takes an
\code{\link[magick:editing]{image_read()}} object as input and returns an object
compatible with \code{\link[grDevices:as.raster]{as.raster()}}. You can use any of
the \verb{image_*()} functions from the \strong{magick} package to process the raster
image.}

\item{...}{Not used currently.}

\item{dpi}{An integer Sets the desired resolution in dots per inch, if NULL,
the function estimates the DPI based on the current device.}

\item{dev}{A string of \code{"png"}, \code{"jpeg"}, or \code{"tiff"} indicates The
graphical output format for rasterization. If the rendering backend is set to
\code{"agg"} or \code{"cairo"}, by default, no explicit device will be
used, otherwise, the default device used is "png".}

\item{backend}{A string of \code{"agg"} or \code{"cairo"}. If the parameter
is set to \code{NULL}, the function will using the \code{grDevices} package for
rendering. Defaults to either \code{agg} or \code{cairo} (whichever is available). If
neither is available, falls back to \code{grDevices}.}

\item{interpolate}{
    A logical value indicating whether to linearly interpolate the
    image (the alternative is to use nearest-neighbour interpolation,
    which gives a more blocky result).
  }
}
\value{
An object with the same class of the input.
}
\description{
The function rasterizes input graphical objects (e.g., grob, layer, ggplot)
and optionally processes the resulting raster using magick, a powerful image
manipulation library. This allows for advanced graphical transformations
directly within the plotting pipeline.
}
\examples{
# data generated code was copied from `ComplexHeatmap`
set.seed(123)
small_mat <- matrix(rnorm(56), nrow = 7)
rownames(small_mat) <- paste0("row", seq_len(nrow(small_mat)))
colnames(small_mat) <- paste0("column", seq_len(ncol(small_mat)))
ggheatmap(small_mat, filling = NULL) +
    raster_magick(geom_tile(aes(fill = value)), dpi = 20)

ggheatmap(small_mat, filling = NULL) +
    # Use `magick::filter_types()` to check available `filter` arguments
    raster_magick(geom_tile(aes(fill = value)),
        magick = function(image) {
            magick::image_resize(image,
                geometry = "50\%x", filter = "Lanczos"
            )
        }
    )
}
